//
// Tables
//

// Change the table states color
@mixin table-row-variant-border($state, $color) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table .#{$state} {
    &,
    td,
    th {
      background-color: $color;
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover tbody .#{$state} {
    &:hover,
    &:hover td,
    &:hover th {
      background-color: darken($color, 5%);
    }
  }
}

.table {
  tr {
    border-bottom: $table-border-width solid $table-border-color;
  }

  th,
  td {
    font-size: $font-size-sm;
    line-height: $spacer;
    vertical-align: middle;
    border: 0;

    ~ * {
      padding-left: 0;
    }
  }

  [class^="icon-"],
  [class*=" icon-"] {
    font-size: $o-table-icon-size;
  }

  [class^="svg-"] {
    display: block;
    width: $o-table-icon-size;
    height: $o-table-icon-size;
    margin: 0 auto;

    &::after {
      width: inherit;
      height: inherit;
    }
  }

  thead {
    tr {
      border-bottom-width: $table-border-width * 2;
    }

    th {
      font-size: $font-size-base;
      font-weight: $font-weight-bold;
      vertical-align: middle;
    }
  }

  tbody th {
    font-weight: $font-weight-normal;
  }

  &.has-checkbox {
    .selected * {
      background-color: $gray-400;
    }

    th:first-child,
    td:first-child {
      width: $spacer;
      padding-top: 0;
      padding-bottom: 0;
    }

    .custom-control {
      margin-bottom: 0;
    }
  }

  &.has-icon {
    td,
    th {
      height: 3.1875rem;
      padding-top: .6875rem;
      vertical-align: middle;

      img {
        width: map-get($spacers, 4);
        height: map-get($spacers, 4);
        margin-right: map-get($spacers, 2);
      }

      [class^="icon-"] {
        width: map-get($spacers, 4);
        margin-right: .375rem;
        font-size: $o-table-icon-size;
        line-height: 0;
        vertical-align: inherit;
      }
    }
  }
}

.table-reflow {
  tr {
    border: 0;
  }

  td {
    line-height: $spacer;
    border-bottom: $table-border-width solid $table-border-color;
  }

  th {
    border-bottom: $table-border-width * 2 solid $table-border-color;

    ~ * {
      border-bottom-width: $table-border-width;
    }
  }

  td,
  th {
    &:last-child {
      border-right: 0;
    }
  }

  thead th + * {
    padding-left: map-get($spacers, 2);
    border-bottom: $table-border-width solid $table-border-color;
  }

  tbody th:first-child {
    padding-left: 0;
  }
}

@each $color in success, info, warning, danger {
  @include table-row-variant-border(#{$color}, theme-color(#{$color}));
}


//
// Table sorter
//
// stylelint-disable selector-class-pattern

.tablesorter {
  th {
    padding-right: map-get($spacers, 4);
    cursor: pointer;

    a {
      color: $link-color;
      text-decoration: $link-decoration;

      @include hover-focus() {
        color: $link-hover-color;
        text-decoration: underline;
      }
    }
  }
}

.tablesorter-header {
  position: relative;
}

.tablesorter-header-inner span {
  padding-right: 1.6875rem;

  &::after {
    position: absolute;
    top: 45%;
    width: .875rem;
    height: $caret-width;
    margin-left: map-get($spacers, 2);
    content: "";
    background-image: escape-svg($accordion-arrow-icon);
  }

  [aria-sort="none"] &::after {
    background: none;
  }

  .tablesorter-headerDesc &::after {
    transform: rotate(180deg);
  }
}

.tablesorter-headerUnSorted .tablesorter-header-inner {
  &:hover,
  &:focus {
    span::after {
      top: 31%;
      height: 1.0625rem;
      background-image: escape-svg($o-sortable-hover-icon);
    }
  }
}
